;;; -*- Mode:LISP; Base:10; Syntax:Common-Lisp; -*-

;;;=============================================================================
;===============================================================================

;#define PROC_VAR  int message, double *xyz, double *fun, long long1, long long2, void *ptr, double *ret
;#define T_PROC_RETURN int
;#define RETURN {fun++; long1++; long2++; return (1);}

;-------------------------------------------------------------------------------
;/*  Сложная синусоида                                                         */
;-------------------------------------------------------------------------------
;T_PROC_RETURN
;mp_data_02 (PROC_VAR)
;-------------------------------------------------------------------------------
(defun mp_data_02 (message xyz fun long1 long2 ptr ret)

(declare (ignore fun long1 long2 ret))

(let (
  (minproc ptr)
  )

(cond
 ;; ---------------------------------------

 ((= message YINIT)
   (setf (DIM) 1)

;    //	minproc_set (minproc, -10, +10,  0.1); вправо уходит вниз!!!
   (minproc_set  minproc -10.0 +7.0  
                 0.1 ;0.2 
                 )
   (setf (NAME) "sin(x)*x^2")

   ;; (setf (NUM_BEG) 1) ; одно начальное приближение
   ;; //XYZ_BEG[0][0] = -6.0;

   (setf *calc_xi* 'proc_sinusoida) ;; !!!!!!!!!!
   )
 ;; ---------------------------------------

 ((= message YTRUE)
   (setf (NUM_TRU) 1)

   (setf (aref (XYZ_TRU) 0 0)  -8.1)
   (setf (nth 0 (FUN_TRU))   -63.63)
   )
 ;; ---------------------------------------


 ((= message YCALC)
  ;(format t ".......YCALC ~%") ; мы сюда попадаeм (eсли нe пчeлами ищeм!)
  (funcall *calc_xi* (coerce xyz 'list))
 )
 ;; ---------------------------------------

)

;  RETURN;
))
;===============================================================================

;#define x1 (((double *) this_entity->chromosome[0])[0])
;#define x2 (((double *) this_entity->chromosome[0])[1])
;#define x3 (((double *) this_entity->chromosome[0])[2])

;===============================================================================

;//* Функция Растригина. Число переменных 2. Максимумов - 96 локальных, 4 глобальных.

;//          #define PI 3.14159265358979323846
;//          y=20+x[0]*x[0]+x[1]*x[1]-10*cos(2*PI*x[0])-10*cos(2*PI*x[1]);

;//          Пространство: -5.12<=x[t]<=5.12
;//          Максимум: F(4.52299,4.52299)  =80.7065
;//                    F(-4.52299,4.52299) =80.7065
;//                    F(4.52299,-4.52299) =80.7065
;//                    F(-4.52299,-4.52299)=80.7065

;//* Функция Растригина. Число переменных 10. Максимумов - (10^10)-1 локальных и 1 глобальный.

;//          #define PI 3.14159265358979323846
;//          y = -100;
;//          for(t=0; t<XNum; t++) 
;//            y += 10* cos (2*PI*x[t]) - x[t]*x[t];

;//          Пространство: -5.12<=x[t]<=5.12
;//          Максимум: F(0,..,0)=0

;-------------------------------------------------------------------------------

;// ф-ия (из отчета),  FMIN (1, 2, 3) = 1.0
;/*   case 4:  */
;/*     gaul->dim  =     3; */
;/*     gaul->xmin = -10.0; */
;/*     gaul->xmax = +10.0; */
;/*     A = x1-1; */
;/*     B = x2-2; */
;/*     C = x3-3; */
;/*     fitness = - (2*(A*A+B*B+C*C) + sin(A*B*C)*sin(A*B*C) + 1); */
;/*     break; */

;-------------------------------------------------------------------------------
;/*  Простейшая парабола                                                       */
;-------------------------------------------------------------------------------
;T_PROC_RETURN
;mp_data_01 (PROC_VAR)
;-------------------------------------------------------------------------------
(defun mp_data_01 (message xyz fun long1 long2 ptr ret)

(declare (ignore fun long1 long2 ret))

(let (
  (minproc ptr)
  )

(cond
 ;; ---------------------------------------

 ((= message YINIT)
   (setf (DIM) 1) ; DIM  = 4;

   (minproc_set  minproc -2.0 2.0  0.1)
   (setf (NAME) "x1^2+x2^2+..")

   ;; как быть тут?  чья это забота?
   (setf (NUM_BEG) 1) ; одно начальное приближение

   (dotimes (i (DIM))
     (setf (aref (XYZ_BEG) 0 i) 1.0)
     )
   (setf *calc_xi* 'proc_hsphere) ;; !!!!!!!!!!
   )
 ;; ---------------------------------------

 ((= message YTRUE)
   (setf (NUM_TRU) 1)

   (dotimes (d (DIM))
     (setf (aref (XYZ_TRU) 0 d)  0)
     )
   ;; а гдe значeниe функции ? (нужно для get_stopfun)
   (setf (nth 0 (FUN_TRU)) 0.0) 
  )
 ;; ---------------------------------------


 ((= message YCALC)
  (funcall *calc_xi* (coerce xyz 'list))
 )
 ;; ---------------------------------------


)

;  RETURN;
))
;-------------------------------------------------------------------------------
;/*  Функция Розенброка N-го порядка                                           */
;/*  В 2-d случае это функция "Банана"                                         */
;-------------------------------------------------------------------------------
;T_PROC_RETURN
;mp_data_03 (PROC_VAR)
;{
;  YT_MINPROC *minproc = (YT_MINPROC *)ptr;

;  int    i, d;
;  double /* s, */ sum/* , koef_100 */;

;  switch (message) {

;  case YINIT:
;    DIM  = 2; // порядок функции
;    //minproc_set (minproc, 10.0, +10.0,  0.1); 
;    //minproc_set (minproc, -1.28, +1.28,  0.1); 
;    minproc_set (minproc, -1.28, +1.28,  0.1); 
;    NAME = "Rozenbrok";

;    NUM_BEG = 1; // одно начальное приближение
;                 // а вот нач. приближение тут совсем не к месту !!
;    // ну или выделить в опциональную функцию, т.е. для тестирования, например
;    for (i=0; i < DIM; i++)
;      XYZ_BEG[0][i] = 0.7;

;    break;

;  case YCALC:

;    // ф-ия Розенброка (из отчета),  FMIN (1.0, 1.0) = 1.0
;    //gaul->population_size = 500;
;    //gaul->dim  =     2;
;    //gaul->xmin = -10.0;
;    //gaul->xmax = +10.0;
;    //fitness = - (100 * (x2-x1*x1)*(x2-x1*x1) + (1-x1)*(1-x1) + 1);

;    // тестовая функция j1 
;    sum = 100 / (100*(X1*X1-X2)*(X1*X1-X2) + (1-X1)*(1-X1) + 1); 
;    sum = - sum;

;    if (ret) {
;      *ret = sum;
;    }
;    return (0);

;  case YTRUE:
;    P_NUM(M_TRUE) = 1;
;    for (d=0; d < DIM; d++) {
;      P_XYZ(M_TRUE)[0][d] = 1;
;    }
;    P_FUN(M_TRUE)[0]    = -100.0;

;    break;
;  }

;  RETURN;
;}
;-------------------------------------------------------------------------------
;  Функция Пауэла                                                           
;  пока не получается находить по градиетну - только по абс. минимуму (0.0) !!
; 
;-------------------------------------------------------------------------------
(defun proc_powell (xi)

(let* (
  (xyz (coerce xi 'array))

  (s1  (+ (XN 1) (* 10 (XN 2))))
  (s2  (- (XN 3) (XN 4))     )
  (s3  (- (XN 2) (* 2 (XN 3))) )
  (s4  (- (XN 1) (XN 4))     )
  )

  (+ (* s1 s1) (* 5 s2 s2) (* s3 s3 s3 s3) (* 10 s4 s4 s4 s4))

))
;-------------------------------------------------------------------------------
(defun mp_data_04 (message xyz fun long1 long2 ptr ret)

(declare (ignore xyz fun long1 long2 ret))

(let (
  (minproc ptr)
  )

(cond
 ;; ---------------------------------------

 ((= message YINIT)
   (setf (DIM) 4)

   (minproc_set  minproc  -2.0 2.0 1.0)
   (setf (NAME) "Powell")
   (setf *calc_xi* 'proc_powell) ;; !!!!!!!!!!
   )
 ;; ---------------------------------------

; ((= message YCALC)
;  (format t "mp_data_04........YCALC ~%") ; мы сюда попадаeм, eсли eщeм нe пчeлами!
;  (funcall *calc_xi* (coerce xyz 'list))
;  )
 ;; ---------------------------------------

 ((= message YTRUE)
   (setf (NUM_TRU) 1)
   (setf (nth 0 (FUN_TRU)) 0)

   (dotimes (d (DIM))
     (setf (aref (XYZ_TRU) 0 d)  0)
     )
   )
 ;; ---------------------------------------
)

;  RETURN;
))
;-------------------------------------------------------------------------------
;/*  Пример из библиотеки GSL (p. 346)                                         */
;-------------------------------------------------------------------------------
(defun proc_gslfunc (xi)

(let* (
  (xyz (coerce xi 'array))

  (x  (XN 1))
  (y  (XN 2))

  (x0 1)
  (y0 2) 
  ;;  Position of the minimum (1, 2)

;    sum = 10.0 * (x - x0) * (x - x0) +
;          20.0 * (y - y0) * (y - y0) + 30.0;
  (sum  (+ (* 10.0 (- x x0) (- x x0)) 
           (* 20.0 (- y y0) (- y y0)) 
           30.0))
  )

;    if (ret) *ret = sum;
;    return (/* sum */ 0);

  sum
))
;-------------------------------------------------------------------------------
;T_PROC_RETURN
;mp_data_05 (PROC_VAR)
;-------------------------------------------------------------------------------
(defun mp_data_05 (message xyz fun long1 long2 ptr ret)

(declare (ignore fun long1 long2 ret))

;  YT_MINPROC *minproc = (YT_MINPROC *)ptr;  
(let (
  (minproc ptr)
  )

;  double x0= 1, y0= 2, x, y;
;  /* Position of the minimum (1, 2). */
;  double sum;

(cond
 ;; ---------------------------------------
;  case YINIT:
;    DIM  = 2;
 ((= message YINIT)
   (setf (DIM) 2)
;    minproc_set (minproc, -10.0, 10.0,  0.1);
;    NAME = "SGL-func";
   (minproc_set  minproc  -10.0 10.0  0.1)
   (setf (NAME) "SGL-func")

;    // ---------------------------------------
;    // как быть тут?  чья это забота?
;    NUM_BEG = 1; // одно начальное приближение
   (setf (NUM_BEG) 1) ; одно начальное приближение
;    XYZ_BEG[0][0] = 5.0;
;    XYZ_BEG[0][1] = 7.0;
   (setf (aref (XYZ_BEG) 0 0) 5.0)
   (setf (aref (XYZ_BEG) 0 1) 7.0)

   (setf *calc_xi* 'proc_gslfunc) ;; !!!!!!!!!!
   )
 ;; ---------------------------------------

;  case YTRUE:
;    P_NUM(M_TRUE) = 1;
;    P_XYZ(M_TRUE)[0][0] = 1.0;
;    P_XYZ(M_TRUE)[0][1] = 2.0;
;    P_FUN(M_TRUE)[0] = 30.0;
;    break;

 ((= message YTRUE)
   ;(format *error-output* "mp_data_05 - YTRUE ~%")
   (setf (NUM_TRU) 1)
   (setf (aref (XYZ_TRU) 0 0)  1.0)
   (setf (aref (XYZ_TRU) 0 1)  2.0)

   (setf (nth 0 (FUN_TRU))    30.0) ; это значeниe бeрeтся в stop_func !!
   )
 ;; ---------------------------------------

;  case YCALC:
;    x = XN(1);
;    y = XN(2);
;    sum = 10.0 * (x - x0) * (x - x0) +
;          20.0 * (y - y0) * (y - y0) + 30.0;
;    if (ret) *ret = sum;
;    return (/* sum */ 0);

 ((= message YCALC)
  ;(format t ".......YCALC ~%") ; мы сюда попадаeм (eсли нe пчeлами ищeм!)
  (funcall *calc_xi* (coerce xyz 'list))
 )
 ;; ---------------------------------------

;  default: ;;
 ;; ---------------------------------------
)

))
;-------------------------------------------------------------------------------
;//* Griewank. Число переменных 2. Максимумов - множество локальных и 1 глобальный.

;//  y=1/(((x[0]*x[0]+x[1]*x[1])/200)-cos(x[0])*cos(x[1]/sqrt(2))+2);

;//  Пространство: -20<=x[t]<=20
;//  Максимум: F(0,0)=1
;-------------------------------------------------------------------------------
;T_PROC_RETURN
;mp_data_j5 (PROC_VAR)
;{
;  YT_MINPROC *minproc = (YT_MINPROC *)ptr;
;  double sum;

;  switch (message) {
;  case YINIT:
;    DIM = 2;
;    //minproc_set (minproc, -20.0, +20.0,  0.1 /*XYZ_ERR*/);
;    minproc_set (minproc, -5.0, +5.0,  0.1);
;    NAME = "Griewank2";

;    break;
;  case YCALC:
;    sum = - (1 / (((X1*X1 +X2*X2)/200) - cos(X1)*cos(X2/sqrt(2))+2));

;    if (ret) *ret = sum;
;    return (0);

;  case YTRUE:
;    P_NUM(M_TRUE) = 1;
 
;    P_XYZ(M_TRUE)[0][0] = 0.0;
;    P_XYZ(M_TRUE)[0][1] = 0.0;
;    P_FUN(M_TRUE)[0]    = -1.0;

;    break;
;  default:
;    ;;;;;;;;;;;;;;;;;;;;;
;  }

;  RETURN;
;}
;-------------------------------------------------------------------------------
;// Растригина ; размерность 10 ; один глобальный экстремум и 10^10-1 локальных
;-------------------------------------------------------------------------------
;T_PROC_RETURN
;mp_data_j6 (PROC_VAR)
;{
;  YT_MINPROC *minproc = (YT_MINPROC *)ptr;
;  double sum/* , mul */;

;  switch (message) {
;  case YINIT:
;    DIM = 10;
;    minproc_set (minproc, -5.12, +5.12, 0.1 /*XYZ_ERR*/);
;    NAME = "Rastrigin";

;    break;
;  case YCALC:
;    sum = 0;
;    int   i;
;    for (i=0; i<DIM; i++) {
;      sum += (10* cos (2*PI*XN(i)) - XN(i)*XN(i));
;    }

;    if (ret) {
;      *ret = - (sum - 100);
;    }
;    return (0);

;  case YTRUE:
;    P_NUM(M_TRUE) = 1;
;    for (i=0; i<DIM; i++) {
;      P_XYZ(M_TRUE)[0][i] = 0.0;
;    }
;    P_FUN(M_TRUE)[0] = 0.0;

;    break;
;  default:
;    ;;;;;;;;;;;;;;;;;;;;;
;  }

;  RETURN;
;}
;-------------------------------------------------------------------------------
; Griewank ; размерность 10 ; один глобальный и множество локальных максимумов
;-------------------------------------------------------------------------------
(defun proc_griewank10 (xi)

(let* (
  (xyz (coerce xi 'array))

  (sum  0)
  (mul  1)
  (dim (list-length xi))
  )

  ;(dotimes (i dim)
  (loop for i from 1 to dim do
      (incf sum (* (XN i) (XN i)))
      (setf mul (* mul (cos (/ (XN i) (sqrt i)))))
    )

  (- (- 10 (- (/ sum 4000) mul -1.0)))
))
;-------------------------------------------------------------------------------
(defun mp_data_j7 (message xyz fun long1 long2 ptr ret)

(declare (ignore xyz fun long1 long2 ret))

(let (
  (minproc ptr)
  )

(cond
 ;; ---------------------------------------

 ((= message YINIT)
   (setf (DIM) 10)

   ;(minproc_set  minproc  -512.0 +512.0  0.1)
   (minproc_set  minproc  -0.1 +0.1  0.1)

   (setf (NAME) "Griewank10")
   (setf *calc_xi* 'proc_griewank10) ;; !!!!!!!!!!
   )
 ;; ---------------------------------------

 ((= message YTRUE)
   (setf (NUM_TRU) 1)
   (setf (nth 0 (FUN_TRU)) -10.0)

   (dotimes (d (DIM))
     (setf (aref (XYZ_TRU) 0 d)  0.0)
     )
   )
 ;; ---------------------------------------
)

;  RETURN;
))
;===============================================================================
;//
;===============================================================================
;//
;-------------------------------------------------------------------------------
(defun minproc_print_name (minproc)

;  printf ("%-13s  D=%d ", NAME, (int)DIM); 
  (format t "~13A  D=~D " (NAME) (DIM))

)
;-------------------------------------------------------------------------------
(defun minproc_check_print (minproc)

(let (
  (dim (DIM))
  is_compare
  )

;  //minproc_true (minproc);

;  is_compare = fpoints_compare (dim, MM->s_calc, MM->s_true,                                      
;                                MM->xyz_err[0]); 

  (setf is_compare 
        (fpoints_compare dim (S_CALC minproc) (S_TRUE minproc) (nth 0 (XYZ_ERR)))
        )

;  if (is_compare) printf (" .... O-KEY!");
;  else            printf (" .... ERROR!");

  (if is_compare (format t " .... O-KEY!")
                 (format t " .... ERROR!")
                 )
  (format t "~%")
  
;  if (!is_compare) {
;    fpoints_print (MM->s_true, "true: ", dim);
;    fpoints_print (MM->s_calc, "calc: ", dim);
;  }

  (when (not is_compare)
    (fpoints_print (S_TRUE minproc) "true: " dim)
    (fpoints_print (S_CALC minproc) "calc: " dim)
    )

))
;-------------------------------------------------------------------------------
;void
;bot_calc_data (YT_MINBOT *bot, YT_MINPROC *minproc)  
;-------------------------------------------------------------------------------
(defun bot_calc_data (bot minproc)  

  (minproc_begin  minproc 0 0)  ; // вообще то это тут лишнее, но пока
;  // почему то создаются дубликат решения  ..NUM_END..

  (setf (LONG3 bot) minproc)  ; // ????
  (funcall (BOT_DATA bot) bot minproc)

  (funcall (BOT_TODO bot) bot) ; !!!!!!  напускаем бота на данные

;  //minproc_true (minproc);

  (format t "~A --> " (P_NAME bot))
  (minproc_print_name minproc) ;// печатаем имя данных

  (format t " --> ")
  (minproc_check_print minproc)

)
;-------------------------------------------------------------------------------
;double
;get_stopfun (YT_MINPROC *minproc)  
;-------------------------------------------------------------------------------
(defun get_stopfun (minproc)  

(let (
  ;  double sf;
  ;sf =  P_FUN(M_TRUE)[0];
  (sf (nth 0 (FUN_TRU)))
  )

  sf
))
;-------------------------------------------------------------------------------
(defun simp_test (argus) (declare (ignore argus)) 

(let* (
  (m_dat01  (minproc_create_begin 'mp_data_01))
  (m_dat02  (minproc_create_begin 'mp_data_02))
  (m_dat05  (minproc_create_begin 'mp_data_05))

  (m_botperebor  (minbot_make "PereborS"  'botperebor_init
                              'botperebor_data 'botperebor_todo 
                               POWER_DEF 0 0  0))

  (m_botbees     (minbot_make "BeesFind"  'botbees_init
                              'botbees_data 'botbees_todo 
                               0 0 0 0))

  (m_botgslspusk (minbot_make "GSLspusk" 
                              'botgslspusk_1_init
                              'botspusk_fun_data 
                              'botgslspusk_1_todo
                               10 Nil 0 0))

; здeсь eщe нe вызван жe "minproc_begin"? и соотвeтствeнно YTRUE, а значит нeт
; значeния (nth 0 (FUN_TRU));   так вeдь вызван "minproc_create_begin" !!
; нe к той функции обращался !!
  (stopfun       (get_stopfun  m_dat05)) ; double 
  (m_botfunspusk (minbot_make "GSLspuskFUN" 
                         'botspusk_fun_init
                         'botspusk_fun_data
                         'botspusk_fun_todo  
                          1000 0 0 stopfun))
  )
  ;(format *error-output* "stopfunc= ~s  ~%" stopfun)
 
  (bot_calc_data  m_botperebor m_dat01)
  (bot_calc_data  m_botperebor m_dat02) 
  (bot_calc_data  m_botperebor m_dat05) 

  (format t "~%")

  (bot_calc_data  m_botbees m_dat01)
  (bot_calc_data  m_botbees m_dat02)

  ;(bot_calc_data  m_botbees m_dat05)
;BeesFind --> SGL-func       D=2  -->  .... ERROR!
;               true: f= 30.0  x= #(1.0 2.0) #(1.0 2.0) 
;               calc: f= 31.058596  x= #(1.2684754f0 1.8700376f0) #(1.2684754f0 1.8700376f0) 

  (format t "~%")

  (bot_calc_data  m_botgslspusk m_dat01)
  (bot_calc_data  m_botgslspusk m_dat02)
  (bot_calc_data  m_botgslspusk m_dat05)

  (format t "~%")

  (bot_calc_data  m_botfunspusk m_dat05)
  (format t "~%")

))
;===============================================================================
;-------------------------------------------------------------------------------
(defun more_test (argus) ;(declare (ignore argus)) 

(let* (
  (n   (parse-integer (nth 0 argus)))

;  YT_PROC arr[] = {
  (arr '(
    mp_data_01  ;// m_test 0 ..
    mp_data_02  ;// 1
    mp_data_05  ;// 2
    mp_data_03  ;// Функция Розенброка : m_test 3 @ : не всегда дает результат
    mp_data_04  ;// 4
    mp_data_j5  ;// 5
    mp_data_j6  ;// 6
    mp_data_j7  ;// 7
         ))

  m_dat
  m_botbees 

  stopfun ; double  !!
  m_botfunspusk 
  )
 
;  if (ch == '@')  m_bot = gaulbot_make (300, 200);
;  if (ch == '$')  m_bot = gaulbot_de_make (300, 200);
;  if (ch == '=') { 
;    debug = TRUE;
;    int size = /* 300 */ 30;
;    int gens = /* 200 */ /* 200 */4;
;    m_bot = gaulbot_make (size , gens);
;  }
 
  (if (< n 0) 
 
  (progn
    (setf m_botbees (minbot_make "BEEspusk" 'botbees_init
                                 'botbees_data 'botbees_todo_new
                                 0 0 0 0))
    (bot_calc_data  m_botbees (minproc_create_begin 'mp_data_04))
    (bot_calc_data  m_botbees (minproc_create_begin 'mp_data_j7))
  )

  (progn
    (setf m_dat    (minproc_create_begin (nth n arr)))
    (setf stopfun  (get_stopfun  m_dat)) 
    (setf m_botfunspusk (minbot_make "GSLspuskFUN" 
                                     'botspusk_fun_init
                                     'botspusk_fun_data
                                     'botspusk_fun_todo  
                                     1000 0 0 stopfun))
    (bot_calc_data  m_botfunspusk m_dat)
  )
  )

  (format t "~%")

))
;===============================================================================
;int 
;main (int argc, char** argv) 
;{
;  char *name = argv[1];
;  int   num;
;  char   ch;

;  printf ("\n");

;  if      (!strcmp (name, "simp"))  simp_test ();

;  else {
;    num = atoi (name);
;    ch = (argv[2])[0];
   
;    more_test (num, ch); 
;  }

;  printf ("\n");
;  return (0);
;}
;===============================================================================
