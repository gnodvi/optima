;;; -*- Mode:LISP; Base:10; Syntax:Common-Lisp; -*-

;;;=============================================================================

;(load "t-graf.cl")
;(load "t-nets.cl")
;(load "t-ants.cl")

;;;=============================================================================
; 7.2 Artificial Ant

; As a second illustration of genetic programming, consider the task of 
; navigating an artificial ant attempting to find all the food lying along an
; irregular trail as described in subsection 3.3.2 (Jefferson et al. 1991; 
; Collins and Jefferson 1991a, 1991b). The problem involves primitive
; operations enabling the ant to move forward, turn right, turn left, and sense 
; food along the irregular Santa Fe trail (figure 3.6).

; When Jefferson, Collins, et al. used the conventional genetic algorithm 
; operating on strings to find the finite-state automaton to solve this
; problem, it was first necessary to develop a representation scheme that 
; converted the potential automaton into binary strings of length 453. In
; genetic programming, the problem can be approached and solved in a far more 
; direct way using 
; the natural terminology of the problem.

;===============================================================================
;

;===============================================================================
;-------------------------------------------------------------------------------
(defun define_fitness_cases_NIL ()

  (values NIL)
);
;-------------------------------------------------------------------------------
(defun evaluate_standardized_fitness_ANTS (program fitness-cases)                     

(declare (ignore fitness-cases))

(let (
      raw-fitness hits standardized-fitness	     
      ) 

  (setf raw-fitness 0.0)	                                     
  (setf hits 0)	                                             

  ;(pole_create_init 'arr_make_0)
  (pole_create_init array_make_func)

  ;; Each move operation and each turn operation takes one step. In our version 
  ;; of this problem, we limited the ant to 400 time steps

  ;; Time was computed here in the same way as in the work of Jefferson, Collins, 
  ;; et al. That is, the three primitive functions RIGHT, LEFT,
  ;; and MOVE each take one time step to execute, whereas the IF-FOOD-AHEAD 
  ;; conditional branching operator and the unconditional
  ;; connectives PROGN2 and PROGN3 each take no time steps to execute.

  (do_steps program max_steps)

  (setf raw-fitness (POLE-eat *pole*))
  (setf hits raw-fitness)

  (setf standardized-fitness (- number_of_foods raw-fitness))
	                     
  (values standardized-fitness hits)	                            
))	                                                             
;-------------------------------------------------------------------------------
(defun define_parameters_ANTS ()

  ;(setf *number-of-fitness-cases*                      89) ;; ЧТОБЫ БЫЛ КРИТEРИЙ ОСТАНОВА

  (setf *max-depth-for-new-individuals*                 6)
  (setf *max-depth-for-individuals-after-crossover*    17)

  (setf *reproduction-fraction*                       0.1)
  (setf *crossover-at-any-point-fraction*             0.2)
  (setf *crossover-at-function-point-fraction*        0.2)

  (setf *max-depth-for-new-subtrees-in-mutants*         4)

  (setf *method-of-selection*      :fitness-proportionate)
  (setf *method-of-generation*     :ramped-half-and-half)

  (setf *is_ADF_as_OLD* t) ;; надо было для совместимости результатов

  (values)
)
;-------------------------------------------------------------------------------
(defun define_termination_criterion_ANTS (
        current-generation                                 
        maximum-generations	                                     
        best-standardized-fitness	                             
        best-hits)
	                                             
  (declare (ignore best-standardized-fitness))	                     

  (values	                                                     
    (or (>= current-generation  maximum-generations)	             
        (>= best-hits           number_of_foods) ;!!!!
    ))	                                                             
)	                                                             
;-------------------------------------------------------------------------------
(defun ANTS_ ()

  (set_sms_list (list (list  

       '(IF-FOOD-AHEAD  PROGN  PROGN)  
       '(2              2      3)  

       '((LEFT) (RIGHT) (MOVE))
       ))
  )

  ;(setf array_make_func 'arr_make_0)
  (setf number_of_foods  89)
  ;(setf max_steps 400)

  (values 
          'define_fitness_cases_NIL
          'evaluate_standardized_fitness_ANTS

          'define_parameters_ANTS
          'define_termination_criterion_ANTS
  )
)
;-------------------------------------------------------------------------------
(defun ANT_0 ()

  (setf array_make_func 'arr_make_0)
  (setf max_steps 400)

  (ANTS_)
)
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
;(defun run-gp-system_ants (num)


;)
;-------------------------------------------------------------------------------
(defun s_07_2 (num)

  (case num

  ;; этот вариант запускаeтся в тeстe
  (01  '(progn 
          (run-genetic-programming-system  'ANT_0  1.0  1  1  
                                           ;(list ant_0_err) 
                                           (list ant_0) 
          )
          (pole_print)           
          ))
  
  (10  '(progn 
          ;(run-genetic-programming-system  'ANT_0  1.0  51  500) 
          (run-genetic-programming-system  'ANT_0  1.0  20  100) 
          ;(run-genetic-programming-system  'ANT_0  1.0  5  10) 
          (pole_print)           
          ))
  )

  ;(pole_print)           
)
;===============================================================================
;
;-------------------------------------------------------------------------------
(defun ANT_2 ()

  (setf array_make_func 'arr_make_2)
  (setf max_steps 200)

  (ANTS_)
)
;-------------------------------------------------------------------------------
(defun ant_test_gp_old (num)

  (case num

  (10  '(progn
          ;(run-genetic-programming-system  'ANT_2  1.0  50   400)  ; EAT=58
          ;(run-genetic-programming-system  'ANT_2  1.0  50   300) 
          ;(run-genetic-programming-system  'ANT_2  1.0  30   200) 
          ;(run-genetic-programming-system  'ANT_2  1.0  20   100) 
          (run-genetic-programming-system  'ANT_2  1.0  5   10) 

          (pole_print) ; а какоe полe мы здeсь пeчатаeм ?         
          )) 

))
;-------------------------------------------------------------------------------
(defun ant_test_gp_new (argus)

  (declare (ignore argus))

  (seed_set_random)

  (run-g-p-system 'ANT_2 ;problem-function
                 ;;seed
                 ;50 ; 5 ;maximum-generations
                 ;400 ; 10; size-of-population
                 5 
                 10
                 
                 NIL;seeded-programs
                 )

  (evaluate_standardized_fitness_ANTS
           (funcall *get_starter* (ORGANISM-genotype *best-of-run*)) 
           NIL)

  (pole_print)       

)
;;;=============================================================================

; - GP на макросах, конвeрторы разных прeдставлeний автоматов, бeлeвыe формулы
; - 
;-------------------------------------------------------------------------------

